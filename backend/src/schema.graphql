# import * from './generated/prisma.graphql'

type User {
  id: ID!
  name: String!
  email: String!
  combinations: [Combination]
}

# input TechniqueInput {
#   id: ID!
# }

input CombinationTechniqueInput {
  # technique: TechniqueInput
  technique: ID!
  index: Int
}


input CombinationInput {
  # technique: Technique!
  # index: Int!
  id: ID!
}

type Mutation {
  createUser(name: String! email: String! combinations: [CombinationInput]): User
  updateUser(id: ID! name: String email: String! combinations: [CombinationInput]): User!
  deleteUser(id: ID!): User
  createTechnique(name: String! description: String rank: Rank): Technique
  updateTechnique(id: ID! name: String description: String rank: Rank): Technique!
  deleteTechnique(id: ID!): Technique
  createCombination(
    name: String
    numTechniques: Int
    maxRank: Rank
    techniques: [CombinationTechniqueInput]
  ): Combination



  # createCombination(
  #   name: String
  #   numTechniques: Int
  #   maxRank: Rank
  #   techniques: [CombinationTechniqueInput]
  #   # techniques: [CombinationTechniqueCreateManyInput]
  # ): Combination


  # updateCombination(id: ID! name: String numTechniques: Int maxRank: Rank techniques: [TechniqueInput]): Combination
  deleteCombination(id: ID!): Combination
}

type Query {
  users: [User]!
  techniques: [Technique]!
  combinations: [Combination]!
  user(where: UserWhereUniqueInput!): User
  technique(where: TechniqueWhereUniqueInput!): Technique
  combination(where: CombinationWhereUniqueInput!): Combination
}