# this file represents the 'shape' of types available to the db application.
# it does not represent the behavior of the server application
# the generated prisma.graphql file exposes possible behaviors available to the schema.graphql file

# User permissions
enum Permission {
  USER
  ADMIN
}

# Skill ranks for techniques
enum Rank {
  NONE
  WHITE
  ADV_WHITE
  YELLOW
  ADV_YELLOW
  ORANGE
  ADV_ORANGE
  GREEN
  ADV_GREEN
  BLUE
  ADV_BLUE
  PURPLE
  ADV_PURPLE
  BROWN
  ADV_BROWN
}

type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  combinations: [Combination]
  createdAt: DateTime!
  updatedAt: DateTime!
}

# an individual technique w/o reference to a combination
# names must be unique in order to prevent having overlap
type Technique {
  id: ID! @unique
  name: String! @unique
  description: String
  rank: Rank!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# will be the connection between a Technique and a Combination
# new CombinationTechnique objects will be created for each combination
# is there a way to re-use them?
type CombinationTechnique {
  id: ID! @unique
  technique: Technique
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A collection of techniques defined by a single CombinationTechnique
# IDs are passed to the technique property to `connect`/define the appropriate technique to use
type Combination {
  id: ID! @unique
  name: String! @default(value: "Untitled")
  numTechniques: Int @default(value: "1")
  maxRank: Rank! @default(value: "NONE")
  combinationTechniques: [CombinationTechnique!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

